// Mocks generated by Mockito 5.4.6 from annotations
// in user_rest_api/test/api/user_api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:user_rest_api/models/user.dart' as _i2;
import 'package:user_rest_api/services/user_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.User> getAllUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUsers, []),
            returnValue: <_i2.User>[],
          )
          as List<_i2.User>);

  @override
  _i2.User? getUserById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getUserById, [id])) as _i2.User?);

  @override
  _i2.User addUser(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#addUser, [user]),
            returnValue: _FakeUser_0(this, Invocation.method(#addUser, [user])),
          )
          as _i2.User);

  @override
  _i2.User? updateUser(int? id, _i2.User? updatedUser) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [id, updatedUser]))
          as _i2.User?);

  @override
  bool deleteUser(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [id]),
            returnValue: false,
          )
          as bool);
}
